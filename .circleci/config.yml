# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks. 
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.1

jobs:
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build backend
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/node_modules

  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build front end
          working_directory: ./frontend
          command: npm run build
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/node_modules
  
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Back-end build
          command: |
            cd backend &&\
            npm i &&\
            npm run build

  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run frontend test.
          command: |
            cd frontend
            npm audit fix
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check frontend known security vulnerabilities
          working_directory: ./frontend
          command: npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check backend known security vulnerabilities
          working_directory: ./backend
          command: npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4} \
              --stack-name backend-${CIRCLE_WORKFLOW_ID:0:4} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:4}
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:4} \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:4}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:4}"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory
            curl -H "Content-Type: text/plain" -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" \
              --request PUT \
              --data `aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:4}" \
                --output text` \
              https://api.memstash.io/values/deployed-url-${CIRCLE_WORKFLOW_ID:0:4}
              echo URL: https://api.memstash.io/values/deployed-url-${CIRCLE_WORKFLOW_ID:0:4}
              echo Token: aae138e1-6fda-4047-a8c5-6fb024444beb
      - run:
          name: Add .env vars to backend env
          command: |
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
      - persist_to_workspace:
          root: ~/project
          paths:
            - .circleci/ansible/inventory.txt
            - backend/
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a2:75:9d:8f:84:ed:c6:56:06:11:bd:a0:2b:21:64:38"]
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory configure-server.yml
      # Here's where you will add some code to rollback on failure
      
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install aws ci
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: run migrations
          working_directory: ./backend
          command: |
            cat .env
            npm run migrations | tee migrations-${CIRCLE_WORKFLOW_ID}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID}.txt
      - run:
          name: send results to memstash
          working_directory: ./backend
          command: |
            if grep -q "success" migrations-${CIRCLE_WORKFLOW_ID}.txt
            then
              echo "Migration success"
              curl -H "Content-Type: text/plain" -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "Migration failed"
              curl -H "Content-Type: text/plain" -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install aws ci
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Rebuild frontend with backend API Url
          command: |
            BACKEND_IP=$(curl -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" \
              --request GET https://api.memstash.io/values/deployed-url-${CIRCLE_WORKFLOW_ID:0:4})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects to S3
          working_directory: ./frontend
          command: |
            BACKEND_IP=$(curl -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" \
                --request GET https://api.memstash.io/values/deployed-url-${CIRCLE_WORKFLOW_ID:0:4})

            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"

            echo API_URL=$API_URL > .env
            echo ENVIRONMENT=development >> .env
            cat ".env"
            npm run build
            cd dist
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:4} --delete
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a2:75:9d:8f:84:ed:c6:56:06:11:bd:a0:2b:21:64:38"]
      - attach_workspace:
          at: .
      - run:
          name: install dependencies
          working_directory: /tmp
          command: |
            apk add --update tar gzip openssh-client ansible nodejs npm curl 
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: deploy backend
          no_output_timeout: 30m
          command: |
            pwd            
            tar -C backend -czvf backend_artifact.tar.gz .
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            Backend_URL=$(curl -H "token: aae138e1-6fda-4047-a8c5-6fb024444beb" --request GET https://api.memstash.io/values/deployed-url-${CIRCLE_WORKFLOW_ID:0:4})
            echo ${Backend_URL}
            export API_URL="http://${Backend_URL}:3000/api/status"
            echo "${API_URL}"
            curl ${API_URL}
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s  "http://udapeople-${CIRCLE_WORKFLOW_ID:0:4}.s3-website-us-west-2.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  my_workflow: 
    jobs:
      - build_backend
      - build_frontend
      - test_backend:
          requires:
            - build_backend
      - test_frontend:
          requires:
            - build_frontend
      - scan-backend:
          requires:
            - build_backend
      - scan-frontend:
          requires:
            - build_frontend
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires:
            - test_backend
            - test_frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
            - deploy-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]

      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test

